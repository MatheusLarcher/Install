#!/bin/bash
tput setaf 8 ; tput setab 5; tput bold ; printf '%30s%s%-15s\n' "OpenVPN Manager" ; tput sgr0
echo ""

corPadrao="\033[0m"
preto="\033[0;30m"
vermelho="\033[0;31m"
verde="\033[0;32m"
marrom="\033[0;33m"
azul="\033[0;34m"
purple="\033[0;35m"
cyan="\033[0;36m"
cinzaClaro="\033[0;37m"
pretoCinza="\033[1;30m"
vermelhoClaro="\033[1;31m"
verdeClaro="\033[1;32m"
amarelo="\033[1;33m"
azulClaro="\033[1;34m"
purpleClaro="\033[1;35m"
cyanClaro="\033[1;36m"
branco="\033[1;37m"

# OpenVPN instalador para Debian, Ubuntu e CentOS

# Esse script irá trabalhar no Debian, Ubuntu, CentOS e provavelmente outros distros # das mesmas famílias, embora nenhum suporte é oferecido para eles.
# mas irá funcionar se você simplesmente deseja configurar uma VPN no
# seu Debian/Ubuntu/CentOS. Ele foi projetado para ser tão
# discreto e universal quanto possível.



# Detect Debian users running the script with "sh" instead of bash

if readlink /proc/$$/exe | grep -qs "dash"; then
        echo "This script needs to be run with bash, not sh"
        exit 1
fi

if [[ "$EUID" -ne 0 ]]; then
        echo "Sorry, you need to run this as root"
        exit 2
fi

if [[ ! -e /dev/net/tun ]]; then
        echo "TUN is not available"
        exit 3
fi

if grep -qs "CentOS release 5" "/etc/redhat-release"; then
        echo "CentOS 5 is too old and not supported"
        exit 4
fi
if [[ -e /etc/debian_version ]]; then
        OS=debian
        GROUPNAME=nogroup
        RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
        OS=centos
        GROUPNAME=nobody
        RCLOCAL='/etc/rc.d/rc.local'
else
        echo "Looks like you aren't running this installer on a Debian, Ubuntu or CentOS system"
        exit 5
fi

# Try to get our IP from the system and fallback to the Internet.
# I do this to make the script compatible with NATed servers (lowendspirit.com)
# and to avoid getting an IPv6.

IP=$(wget -4qO- "http://whatismyip.akamai.com/")

        clear
        echo 'Bem vindo ao instalador OpenVPN'
        echo ""
        # OpenVPN instalador e criação do primeiro usuario
        echo "Responda as perguntas para iniciar a instalação"
        echo "Responda corretamente"
        echo ""
        echo "Primeiro precisaremos do ip de sua maquina,este ip está correto ?"
        echo "listening to."
        read -p "IP address: " -e -i $IP IP
        echo ""
        echo "Qual protocolo você deseja para as conexões OPENVPN ?"
        echo "   1) UDP"
        echo "   2) TCP (Recomendado)"
        read -p "Protocol [1-2]: " -e -i 2 PROTOCOL
        case $PROTOCOL in
                1)
                PROTOCOL=udp
                ;;
                2)
                PROTOCOL=tcp
                ;;
        esac
        echo ""
        echo "Qual porta você deseja usar ?"
        read -p "Port: " -e -i 443 PORT
        echo ""
        echo "Qual DNS você deseja usar ?"
        echo "   1) Sistema(Recomendado)"
        echo "   2) Google"
        echo "   3) OpenDNS"
        echo "   4) NTT"
        echo "   5) Hurricane Electric"
        echo "   6) Verisign"
        read -p "DNS [1-6]: " -e -i 1 DNS
        echo ""
        echo "Okay, você está pronto para executar o openvpn "
        read -n1 -r -p "Pressione uma tecla para continuar..."
        if [[ "$OS" = 'debian' ]]; then
                apt-get upgrade
                apt-get install openvpn iptables openssl ca-certificates -y
        else
                # Else, the distro is CentOS
                yum install epel-release -y
                yum install openvpn iptables openssl wget ca-certificates -y
        fi
        # An old version of easy-rsa was available by default in some openvpn packages
        if [[ -d /etc/openvpn/easy-rsa/ ]]; then
                rm -rf /etc/openvpn/easy-rsa/
        fi
        # Adquirindo easy-rsa
        wget -O ~/EasyRSA-3.0.1.tgz "https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz"
        tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
        mv ~/EasyRSA-3.0.1/ /etc/openvpn/
        mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
        chown -R root:root /etc/openvpn/easy-rsa/
        rm -rf ~/EasyRSA-3.0.1.tgz
        cd /etc/openvpn/easy-rsa/
        # Create the PKI, set up the CA, the DH params and the server certificates
        ./easyrsa init-pki
        ./easyrsa --batch build-ca nopass
        ./easyrsa gen-dh
        ./easyrsa build-server-full server nopass
        ./easyrsa gen-crl
        # Move the stuff we need
        cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
        # CRL is read with each client connection, when OpenVPN is dropped to nobody
        chown nobody:$GROUPNAME /etc/openvpn/crl.pem
        # Generando key for tls-auth
        openvpn --genkey --secret /etc/openvpn/ta.key
        # Generando server.conf
        echo "port $PORT
proto $PROTOCOL
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" > /etc/openvpn/server.conf
        echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
        # DNS
        case $DNS in
                1)
                # Obtain the resolvers from resolv.conf and use them for OpenVPN
                grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
                        echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
                done
                ;;
                2)
                echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
                echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
                ;;
                3)
                echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
                echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
                ;;
                4)
                echo 'push "dhcp-option DNS 129.250.35.250"' >> /etc/openvpn/server.conf
                echo 'push "dhcp-option DNS 129.250.35.251"' >> /etc/openvpn/server.conf
                ;;
                5)
                echo 'push "dhcp-option DNS 74.82.42.42"' >> /etc/openvpn/server.conf
                ;;
                6)
                echo 'push "dhcp-option DNS 64.6.64.6"' >> /etc/openvpn/server.conf
                echo 'push "dhcp-option DNS 64.6.65.6"' >> /etc/openvpn/server.conf
                ;;
        esac
        echo "keepalive 10 120
cipher AES-256-CBC
comp-lzo
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
log openvpn-log.log
log-append openvpn-append.log
verb 3
plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so /etc/pam.d/login
client-cert-not-required
username-as-common-name
crl-verify crl.pem" >> /etc/openvpn/server.conf
        # Enable net.ipv4.ip_forward for the system
        sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
        if ! grep -q "\<net.ipv4.ip_forward\>" /etc/sysctl.conf; then
                echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
        fi
        # Avoid an unneeded reboot
        echo 1 > /proc/sys/net/ipv4/ip_forward
        # Needed to use rc.local with some systemd distros
        if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
                echo '#!/bin/sh -e
exit 0' > $RCLOCAL
        fi
        chmod +x $RCLOCAL
        # Set NAT for the VPN subnet
        iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
        sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
        if pgrep firewalld; then
                # We don't use --add-service=openvpn because that would only work with
                # the default port and protocol. Using both permanent and not permanent
                # rules to avoid a firewalld reload.
                firewall-cmd --zone=public --add-port=$PORT/$PROTOCOL
                firewall-cmd --zone=trusted --add-source=10.8.0.0/24
                firewall-cmd --permanent --zone=public --add-port=$PORT/$PROTOCOL
                firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
        fi
        if iptables -L -n | grep -qE 'REJECT|DROP'; then
                # If iptables has at least one REJECT rule, we asume this is needed.
                # Not the best approach but I can't think of other and this shouldn't
                # cause problems.
                iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
                iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
          iptables -F
                iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
                sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT" $RCLOCAL
                sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
                sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
        fi
        # If SELinux is enabled and a custom port or TCP was selected, we need this
        if hash sestatus 2>/dev/null; then
                if sestatus | grep "Current mode" | grep -qs "enforcing"; then
                        if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
                                # semanage isn't available in CentOS 6 by default
                                if ! hash semanage 2>/dev/null; then
                                        yum install policycoreutils-python -y
                                fi
                                semanage port -a -t openvpn_port_t -p $PROTOCOL $PORT
                        fi
                fi
        fi
        # And finally, restart OpenVPN
        if [[ "$OS" = 'debian' ]]; then
                # Little hack to check for systemd
                if pgrep systemd-journal; then
                        systemctl restart openvpn@server.service
                else
                        /etc/init.d/openvpn restart
                fi
        else
                if pgrep systemd-journal; then
                        systemctl restart openvpn@server.service
                        systemctl enable openvpn@server.service
                else
                        service openvpn restart
                        chkconfig openvpn on
                fi
        fi
        # Try to detect a NATed connection and ask about it to potential LowEndSpirit users
        EXTERNALIP=$(wget -4qO- "http://whatismyip.akamai.com/")
        if [[ "$IP" != "$EXTERNALIP" ]]; then
                echo ""
                echo "Looks like your server is behind a NAT!"
                echo ""
                echo "If your server is NATed (e.g. LowEndSpirit), I need to know the external IP"
                echo "If that's not the case, just ignore this and leave the next field blank"
                read -p "External IP: " -e USEREXTERNALIP
                if [[ "$USEREXTERNALIP" != "" ]]; then
                        IP=$USEREXTERNALIP
                fi
        fi
        # client-common.txt is created so we have a template to add further users later
        echo "client
auth-user-pass
dev tun
proto $PROTOCOL
remote $IP $PORT
http-proxy-option CUSTOM-HEADER X-Online-Host  sdp.vivo.com.br
http-proxy $IP 80
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
comp-lzo
key-direction 1
verb 3" > /etc/openvpn/client-common.txt
service openvpn restart
        echo ""
        cd 
        rm OpenVPN-install
        echo -e "\033[0;31m CONCLUIDO...! \033[0m"
        sleep 2
        echo ""
